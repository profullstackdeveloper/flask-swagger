# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.v1_process_insights import V1ProcessInsights  # noqa: F401,E501
from swagger_server.models.v1_process_map import V1ProcessMap  # noqa: F401,E501
from swagger_server import util


class V1ProcessReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, process_id: str=None, map: V1ProcessMap=None, insights: V1ProcessInsights=None, generated_for: str=None, generated_at: datetime=None):  # noqa: E501
        """V1ProcessReport - a model defined in Swagger

        :param process_id: The process_id of this V1ProcessReport.  # noqa: E501
        :type process_id: str
        :param map: The map of this V1ProcessReport.  # noqa: E501
        :type map: V1ProcessMap
        :param insights: The insights of this V1ProcessReport.  # noqa: E501
        :type insights: V1ProcessInsights
        :param generated_for: The generated_for of this V1ProcessReport.  # noqa: E501
        :type generated_for: str
        :param generated_at: The generated_at of this V1ProcessReport.  # noqa: E501
        :type generated_at: datetime
        """
        self.swagger_types = {
            'process_id': str,
            'map': V1ProcessMap,
            'insights': V1ProcessInsights,
            'generated_for': str,
            'generated_at': datetime
        }

        self.attribute_map = {
            'process_id': 'processId',
            'map': 'map',
            'insights': 'insights',
            'generated_for': 'generatedFor',
            'generated_at': 'generatedAt'
        }
        self._process_id = process_id
        self._map = map
        self._insights = insights
        self._generated_for = generated_for
        self._generated_at = generated_at

    @classmethod
    def from_dict(cls, dikt) -> 'V1ProcessReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The v1ProcessReport of this V1ProcessReport.  # noqa: E501
        :rtype: V1ProcessReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def process_id(self) -> str:
        """Gets the process_id of this V1ProcessReport.


        :return: The process_id of this V1ProcessReport.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id: str):
        """Sets the process_id of this V1ProcessReport.


        :param process_id: The process_id of this V1ProcessReport.
        :type process_id: str
        """

        self._process_id = process_id

    @property
    def map(self) -> V1ProcessMap:
        """Gets the map of this V1ProcessReport.


        :return: The map of this V1ProcessReport.
        :rtype: V1ProcessMap
        """
        return self._map

    @map.setter
    def map(self, map: V1ProcessMap):
        """Sets the map of this V1ProcessReport.


        :param map: The map of this V1ProcessReport.
        :type map: V1ProcessMap
        """

        self._map = map

    @property
    def insights(self) -> V1ProcessInsights:
        """Gets the insights of this V1ProcessReport.


        :return: The insights of this V1ProcessReport.
        :rtype: V1ProcessInsights
        """
        return self._insights

    @insights.setter
    def insights(self, insights: V1ProcessInsights):
        """Sets the insights of this V1ProcessReport.


        :param insights: The insights of this V1ProcessReport.
        :type insights: V1ProcessInsights
        """

        self._insights = insights

    @property
    def generated_for(self) -> str:
        """Gets the generated_for of this V1ProcessReport.


        :return: The generated_for of this V1ProcessReport.
        :rtype: str
        """
        return self._generated_for

    @generated_for.setter
    def generated_for(self, generated_for: str):
        """Sets the generated_for of this V1ProcessReport.


        :param generated_for: The generated_for of this V1ProcessReport.
        :type generated_for: str
        """

        self._generated_for = generated_for

    @property
    def generated_at(self) -> datetime:
        """Gets the generated_at of this V1ProcessReport.


        :return: The generated_at of this V1ProcessReport.
        :rtype: datetime
        """
        return self._generated_at

    @generated_at.setter
    def generated_at(self, generated_at: datetime):
        """Sets the generated_at of this V1ProcessReport.


        :param generated_at: The generated_at of this V1ProcessReport.
        :type generated_at: datetime
        """

        self._generated_at = generated_at
