openapi: 3.0.1
info:
  title: reco/services/v1/process_service.proto
  version: "1.0"
externalDocs:
  description: RecoLabs services repository
  url: https://github.com/recolabs/reco-services
servers:
- url: /
security:
- bearer: []
tags:
- name: ProcessService
paths:
  /api/v1/genreate-report/{processId}:
    get:
      tags:
      - process
      summary: Trigger Argo workflow that generates a report from existing metadata.
      description: Sets up the proper Argo Workflow arguments and run the steps.
      operationId: process_service_generate_report_from_process_metadata
      parameters:
      - name: processId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GenerateReportFromProcessMetadataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-openapi-router-controller: swagger_server.controllers.process_controller
  /api/v1/process-metadata:
    get:
      tags:
      - process
      summary: List all process metadata (used from process lib screen).
      description: Called by UI/Analyst to display all processes metadata.
      operationId: process_service_list_process_metadata
      parameters:
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1ListProcessMetadataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-openapi-router-controller: swagger_server.controllers.process_controller
    put:
      tags:
      - process
      summary: Update an existing process metadata.
      operationId: process_service_update_process_metadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1UpdateProcessMetadataRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1UpdateProcessMetadataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
      x-openapi-router-controller: swagger_server.controllers.process_controller
    post:
      tags:
      - process
      summary: Create new process metadata. Called from UI when pressing '+ Create
        new process' and manually by Analysts.
      description: create a new metadata object to be describe a process and use to
        generate and display the report.
      operationId: process_service_create_process_metadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateProcessMetadataRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateProcessMetadataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
      x-openapi-router-controller: swagger_server.controllers.process_controller
  /api/v1/process-metadata/{processMetadataId}:
    get:
      tags:
      - process
      summary: "Return a process metadata, if exists."
      description: Called from the process generation flow or manually by analyst
        to get require details.
      operationId: process_service_get_process_metadata
      parameters:
      - name: processMetadataId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetProcessMetadataResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-openapi-router-controller: swagger_server.controllers.process_controller
  /api/v1/process-report:
    post:
      tags:
      - process
      summary: "Create a process report. If there is an existing report for the process,\
        \ the existing reports will remain in the DB (for a while) if you want to\
        \ revert."
      operationId: process_service_create_process_report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1CreateProcessReportRequest'
        required: true
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1CreateProcessReportResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-codegen-request-body-name: body
      x-openapi-router-controller: swagger_server.controllers.process_controller
  /api/v1/process-report/{processId}:
    get:
      tags:
      - process
      summary: Get a single process report.
      description: "To use, you can fill just the ID."
      operationId: process_service_get_process_report
      parameters:
      - name: processId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: A successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1GetProcessReportResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/googlerpcStatus'
      x-openapi-router-controller: swagger_server.controllers.process_controller
components:
  schemas:
    googlerpcStatus:
      type: object
      properties:
        code:
          type: integer
          description: "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
          format: int32
        message:
          type: string
          description: "A developer-facing error message, which should be in English.\
            \ Any\nuser-facing error message should be localized and sent in the\n\
            [google.rpc.Status.details][google.rpc.Status.details] field, or localized\
            \ by the client."
        details:
          type: array
          description: |-
            A list of messages that carry the error details.  There is a common set of
            message types for APIs to use.
          items:
            $ref: '#/components/schemas/protobufAny'
      description: "The `Status` type defines a logical error model that is suitable\
        \ for\ndifferent programming environments, including REST APIs and RPC APIs.\
        \ It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\n\
        three pieces of data: error code, error message, and error details.\n\nYou\
        \ can find out more about this error model and how to work with it in the\n\
        [API Design Guide](https://cloud.google.com/apis/design/errors)."
    protobufAny:
      type: object
      properties:
        typeUrl:
          type: string
          description: "A URL/resource name that uniquely identifies the type of the\
            \ serialized\nprotocol buffer message. This string must contain at least\n\
            one \"/\" character. The last segment of the URL's path must represent\n\
            the fully qualified name of the type (as in\n`path/google.protobuf.Duration`).\
            \ The name should be in a canonical form\n(e.g., leading \".\" is not\
            \ accepted).\n\nIn practice, teams usually precompile into the binary\
            \ all types that they\nexpect it to use in the context of Any. However,\
            \ for URLs which use the\nscheme `http`, `https`, or no scheme, one can\
            \ optionally set up a type\nserver that maps type URLs to message definitions\
            \ as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An\
            \ HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in\
            \ binary format, or produce an error.\n* Applications are allowed to cache\
            \ lookup results based on the\n  URL, or have them precompiled into a\
            \ binary to avoid any\n  lookup. Therefore, binary compatibility needs\
            \ to be preserved\n  on changes to types. (Use versioned type names to\
            \ manage\n  breaking changes.)\n\nNote: this functionality is not currently\
            \ available in the official\nprotobuf release, and it is not used for\
            \ type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than\
            \ `http`, `https` (or the empty scheme) might be\nused with implementation\
            \ specific semantics."
        value:
          pattern: "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$"
          type: string
          description: Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
      description: "`Any` contains an arbitrary serialized protocol buffer message\
        \ along with a\nURL that describes the type of the serialized message.\n\n\
        Protobuf library provides support to pack/unpack Any values in the form\n\
        of utility functions or additional generated methods of the Any type.\n\n\
        Example 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any\
        \ any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n \
        \     ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo\
        \ foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class))\
        \ {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack\
        \ a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n\
        \    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\
        \n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n\
        \     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n\
        \     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err\
        \ != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library\
        \ will by default use\n'type.googleapis.com/full.type.name' as the type URL\
        \ and the unpack\nmethods only use the fully qualified type name after the\
        \ last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield\
        \ type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any`\
        \ value uses the regular\nrepresentation of the deserialized, embedded message,\
        \ with an\nadditional field `@type` which contains the type URL. Example:\n\
        \n    package google.profile;\n    message Person {\n      string first_name\
        \ = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\"\
        ,\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\n\
        If the embedded message type is well-known and has a custom JSON\nrepresentation,\
        \ that representation will be embedded adding a field\n`value` which holds\
        \ the custom JSON in addition to the `@type`\nfield. Example (for message\
        \ [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\"\
        ,\n      \"value\": \"1.212s\"\n    }"
    v1CreateProcessMetadataRequest:
      title: Process Metadata messages
      type: object
      properties:
        md:
          $ref: '#/components/schemas/v1ProcessMetadata'
    v1CreateProcessMetadataResponse:
      type: object
      properties:
        createdMd:
          $ref: '#/components/schemas/v1ProcessMetadata'
      example:
        createdMd:
          name: name
          description: description
          id: id
          iconUrl: iconUrl
          anchors:
            teams:
            - teams
            - teams
            domains:
            - domains
            - domains
            relatedTerms:
            - relatedTerms
            - relatedTerms
            users:
            - users
            - users
    v1CreateProcessReportRequest:
      type: object
      properties:
        report:
          $ref: '#/components/schemas/v1ProcessReport'
    v1CreateProcessReportResponse:
      type: object
      properties:
        createdReport:
          $ref: '#/components/schemas/v1ProcessReport'
      example:
        createdReport:
          processId: processId
          insights:
            externalUsersCount: 6
            externalDomainsCount: 1
            internalUsersCount: 0
            businessOwners:
            - businessOwners
            - businessOwners
            lastActivity: 2000-01-23T04:56:07.000+00:00
            lastExtraction: 2000-01-23T04:56:07.000+00:00
          generatedAt: 2000-01-23T04:56:07.000+00:00
          map:
            processMap: processMap
          generatedFor: generatedFor
    v1GenerateReportFromProcessMetadataResponse:
      type: object
      properties:
        md:
          $ref: '#/components/schemas/v1ProcessMetadata'
      example:
        md:
          name: name
          description: description
          id: id
          iconUrl: iconUrl
          anchors:
            teams:
            - teams
            - teams
            domains:
            - domains
            - domains
            relatedTerms:
            - relatedTerms
            - relatedTerms
            users:
            - users
            - users
    v1GetProcessMetadataResponse:
      type: object
      properties:
        md:
          $ref: '#/components/schemas/v1ProcessMetadata'
      example:
        md:
          name: name
          description: description
          id: id
          iconUrl: iconUrl
          anchors:
            teams:
            - teams
            - teams
            domains:
            - domains
            - domains
            relatedTerms:
            - relatedTerms
            - relatedTerms
            users:
            - users
            - users
    v1GetProcessReportResponse:
      type: object
      properties:
        report:
          $ref: '#/components/schemas/v1ProcessReport'
      example:
        report:
          processId: processId
          insights:
            externalUsersCount: 6
            externalDomainsCount: 1
            internalUsersCount: 0
            businessOwners:
            - businessOwners
            - businessOwners
            lastActivity: 2000-01-23T04:56:07.000+00:00
            lastExtraction: 2000-01-23T04:56:07.000+00:00
          generatedAt: 2000-01-23T04:56:07.000+00:00
          map:
            processMap: processMap
          generatedFor: generatedFor
    v1ListProcessMetadataResponse:
      type: object
      properties:
        mds:
          type: array
          items:
            $ref: '#/components/schemas/v1ProcessMetadata'
        reportStatus:
          type: array
          items:
            $ref: '#/components/schemas/v1ProcessReportGenerationStatus'
      example:
        reportStatus:
        - processId: processId
          timeRemaining: timeRemaining
          status: REPORT_GENERATION_STATUS_UNSPECIFIED
        - processId: processId
          timeRemaining: timeRemaining
          status: REPORT_GENERATION_STATUS_UNSPECIFIED
        mds:
        - name: name
          description: description
          id: id
          iconUrl: iconUrl
          anchors:
            teams:
            - teams
            - teams
            domains:
            - domains
            - domains
            relatedTerms:
            - relatedTerms
            - relatedTerms
            users:
            - users
            - users
        - name: name
          description: description
          id: id
          iconUrl: iconUrl
          anchors:
            teams:
            - teams
            - teams
            domains:
            - domains
            - domains
            relatedTerms:
            - relatedTerms
            - relatedTerms
            users:
            - users
            - users
    v1ProcessAnchors:
      title: "see description here: https://recolabs.atlassian.net/browse/RND-1076"
      type: object
      properties:
        teams:
          type: array
          items:
            type: string
        domains:
          type: array
          items:
            type: string
        users:
          type: array
          items:
            type: string
        relatedTerms:
          type: array
          items:
            type: string
      example:
        teams:
        - teams
        - teams
        domains:
        - domains
        - domains
        relatedTerms:
        - relatedTerms
        - relatedTerms
        users:
        - users
        - users
    v1ProcessInsights:
      type: object
      properties:
        businessOwners:
          type: array
          items:
            type: string
        internalUsersCount:
          type: integer
          format: int64
        externalUsersCount:
          type: integer
          format: int64
        externalDomainsCount:
          type: integer
          format: int64
        lastExtraction:
          title: Temporal report metadata
          type: string
          format: date-time
        lastActivity:
          type: string
          format: date-time
      example:
        externalUsersCount: 6
        externalDomainsCount: 1
        internalUsersCount: 0
        businessOwners:
        - businessOwners
        - businessOwners
        lastActivity: 2000-01-23T04:56:07.000+00:00
        lastExtraction: 2000-01-23T04:56:07.000+00:00
    v1ProcessMap:
      title: see https://recolabs.atlassian.net/wiki/spaces/RND/pages/556008181/Process+map+Data+design
      type: object
      properties:
        processMap:
          title: This string is a JSON as the FE expects to get it to visualize it
          type: string
      example:
        processMap: processMap
    v1ProcessMetadata:
      type: object
      properties:
        id:
          type: string
        name:
          title: "Example: \"Procurement\""
          type: string
        description:
          type: string
        iconUrl:
          type: string
        anchors:
          $ref: '#/components/schemas/v1ProcessAnchors'
      example:
        name: name
        description: description
        id: id
        iconUrl: iconUrl
        anchors:
          teams:
          - teams
          - teams
          domains:
          - domains
          - domains
          relatedTerms:
          - relatedTerms
          - relatedTerms
          users:
          - users
          - users
    v1ProcessReport:
      type: object
      properties:
        processId:
          type: string
        map:
          $ref: '#/components/schemas/v1ProcessMap'
        insights:
          $ref: '#/components/schemas/v1ProcessInsights'
        generatedFor:
          title: "user info\nExample: Username from the company OR \"Internal Analyst\""
          type: string
        generatedAt:
          title: "Example: when the user clicked on \"save\" - resolution of hour,\
            \ not second"
          type: string
          format: date-time
      example:
        processId: processId
        insights:
          externalUsersCount: 6
          externalDomainsCount: 1
          internalUsersCount: 0
          businessOwners:
          - businessOwners
          - businessOwners
          lastActivity: 2000-01-23T04:56:07.000+00:00
          lastExtraction: 2000-01-23T04:56:07.000+00:00
        generatedAt: 2000-01-23T04:56:07.000+00:00
        map:
          processMap: processMap
        generatedFor: generatedFor
    v1ProcessReportGenerationStatus:
      type: object
      properties:
        processId:
          type: string
        status:
          $ref: '#/components/schemas/v1ReportGenerationStatus'
        timeRemaining:
          title: Use this value only if the status is In Progress
          type: string
      example:
        processId: processId
        timeRemaining: timeRemaining
        status: REPORT_GENERATION_STATUS_UNSPECIFIED
    v1ReportGenerationStatus:
      title: "- REPORT_GENERATION_STATUS_IN_PROGRESS: i.e. generating right now"
      type: string
      default: REPORT_GENERATION_STATUS_UNSPECIFIED
      enum:
      - REPORT_GENERATION_STATUS_UNSPECIFIED
      - REPORT_GENERATION_STATUS_IN_PROGRESS
      - REPORT_GENERATION_STATUS_DONE
    v1UpdateProcessMetadataRequest:
      type: object
      properties:
        md:
          $ref: '#/components/schemas/v1ProcessMetadata'
    v1UpdateProcessMetadataResponse:
      type: object
      properties:
        updatedMd:
          $ref: '#/components/schemas/v1ProcessMetadata'
      example:
        updatedMd:
          name: name
          description: description
          id: id
          iconUrl: iconUrl
          anchors:
            teams:
            - teams
            - teams
            domains:
            - domains
            - domains
            relatedTerms:
            - relatedTerms
            - relatedTerms
            users:
            - users
            - users
  securitySchemes:
    bearer:
      type: apiKey
      description: "Authentication token, prefixed by Bearer: Bearer <token>"
      name: Authorization
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_bearer
x-original-swagger-version: "2.0"

